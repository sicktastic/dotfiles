""""""""""""""""
"              "
"              "
"   ✌(◕‿-)✌    "
"   Anthony    "
"              "
"              "
""""""""""""""""

" Encoding ----------------------------------------------------------------------------
  set nocompatible
  set encoding=utf8

" Leader Key --------------------------------------------------------------------------
  let mapleader = ","

" Files -------------------------------------------------------------------------------
  set ft= syn=
  syntax off
  filetype indent on              " Enable filetype-specific indenting
  filetype plugin on              " Enable filetype-specific plugins

" Configs -----------------------------------------------------------------------------
  set autoindent                  " always set autoindenting on
  set autowrite                   " Save on buffer switch
  set backspace=indent,eol,start  " allow backspacing over everything in insert mode
  set expandtab                   " expand tabs by default (overloadable per file type later)
  set foldlevelstart=0
  set go-=L                       " Removes left hand scroll bar
  set guioptions-=T               " Removes top toolbar
  set guioptions-=r               " Removes right hand scroll bar
  set incsearch                   " highlight while searching
  set hlsearch
  set ignorecase                  " ignore case when searching
  set laststatus=2                " Always display the status line"
  set lazyredraw
  set linespace=15
  set mouse=a
  set number                      " always show line numbers
  set nobackup
  set noerrorbells                " don't beep
  set nojoinspaces                " Use one space, not two, after punctuation.
  set nowritebackup
  set pastetoggle=<leader>p       " paste mode
  set relativenumber
  set ruler                       " show the cursor position all the time"
  set regexpengine=1
  set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
  set shiftwidth=2                " number of spaces to use for autoindenting
  set showcmd                     " display incomplete commands"
  set showmode                    " always show what mode we're currently editing in
  set smartcase                   " ignore case if search pattern is all lowercase,
  set smartindent
  set smarttab
  set softtabstop=2               " when hitting <BS>, pretend like a tab is removed, even if spaces
  set splitbelow
  set splitright
  set synmaxcol=200
  set tabstop=2                   " a tab is four spaces
  set tags=tags
  " set textwidth=80
  set timeout timeoutlen=200 ttimeoutlen=100
  set t_ut=
  set visualbell                  " don't beep
  set wrap

" Highlights -------------------------------------------------------------------------
  hi Visual ctermfg=black ctermbg=Yellow
  hi StatusLine ctermbg=magenta ctermfg=cyan
  hi Pmenu ctermbg=black 
  hi Pmenu ctermfg=white

  "" FZF
  set rtp+=/usr/local/opt/fzf
  map <C-p> :GFiles<cr>

  " Quick clear highlight
  map <C-o> :nohl<cr>

" Quick Keys -------------------------------------------------------------------------
  " Quick $MYVIMRC and Sourcing
  map <leader>vr :vsp $MYVIMRC<CR>
  map <leader>so :source $MYVIMRC<CR>

  " Quick way to open frequent command
  map <leader>of :!open j%<CR>
  map <leader>op :!python3 %<CR>

  " Quick save in nomral mode
  nmap <C-s> <esc>:w<CR>

  " Quick save during INSERT mode
  imap <C-s> <esc>:w<CR>

  " Quick escape
  imap jj <esc>
  imap jk <esc>

  " Quicker window movement
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-h> <C-w>h
  nnoremap <C-l> <C-w>l

  " Switch between the last two files
  nnoremap <leader><leader> <c-^>

" Configs from Thoughtbot ------------------------------------------------------------
  " Switch syntax highlighting on, when the terminal has colors, Also switch on highlighting the last used search pattern.
  if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
    syntax on
  endif

  " Organize all plugins
  if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
  endif

  " Load matchit.vim, but only if the user hasn't installed a newer version.
  if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
  endif

  " Quick quit when you are looking at help
  autocmd Filetype help nnoremap <buffer> q :q<CR>

  augroup vimrcEx
    autocmd!

    autocmd BufNewFile,BufRead *.html.eex set filetype=html.ex.exs
    autocmd filetype qf setlocal wrap
    autocmd BufReadPost quickfix map <buffer> <leader>qq :cclose<cr>|map  <buffer> <c-p> <up>|map <buffer> <c-n> <down>
    autocmd FileType unite call s:unite_settings()
    autocmd BufLeave \[unite\]* if "nofile" ==# &buftype | setlocal bufhidden=wipe | endif

    " Help System Speedups
    autocmd filetype help nnoremap <buffer><cr> <c-]>
    autocmd filetype help nnoremap <buffer><bs> <c-T>
    autocmd filetype help nnoremap <buffer>q :q<CR>
    autocmd filetype help set nonumber

  augroup END

  " Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
  if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
  endif

  " Tab completion
  " will insert tab at beginning of line,
  " will use completion if not at beginning
  set wildmode=list:longest,list:full
  function! InsertTabWrapper()
      let col = col('.') - 1
      if !col || getline('.')[col - 1] !~ '\k'
          return "\<tab>"
      else
          return "\<c-p>"
      endif
  endfunction
  inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
  inoremap <S-Tab> <c-n>

  " Treat <li> and <p> tags like the block tags they are
  let g:html_indent_tags = 'li\|p'

  " Autocomplete with dictionary words when spell check is on
  set complete+=kspell

  " Always use vertical diffs
  set diffopt+=vertical

  " Local config
  if filereadable($HOME . "/.vimrc.local")
    source ~/.vimrc.local
  endif

  set grepprg=ag

  " Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
  if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_match_window_bottom = 0
    let g:ctrlp_match_window_reversed = 0
  endif

  if exists("g:ctrlp_user_command")
    unlet g:ctrlp_user_command
  endif
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/public/assets/*,*/vendor/*,*/\.git/*,*/node_modules/*

  if has("gui_running")
    syntax on
    set hlsearch
    set bs=2
    set ai
    set ruler
  endif

  " Index ctags from any project, including those outside Rails
  map <Leader>ct :!ctags -R .<CR>

  " Split Window Resize
  nmap <C-v> :vertical resize +1<cr>

  " This replaces :tabnew which I used to bind to this mapping
  " nmap <leader>T :enew<cr>
  " Move to the next buffer
  nmap <leader>. :bnext<CR>
  " Move to the previous buffer
  nmap <leader>h :bprevious<CR>
  " Close the current buffer and move to the previous one
  " This replicates the idea of closing a tab
  nmap <leader>bq :bp <BAR> bd #<CR>
  " Show all open buffers and their status
  nmap <leader>bl :ls<CR>

" Folding -----------------------------------------------------------------------------
  nnoremap <Space> za
  vnoremap <Space> za

" Airline -----------------------------------------------------------------------------
  " let g:airline_powerline_fonts = 1
  " let g:airline#extensions#tabline#enabled = 1
  " let g:airline#extensions#tabline#show_buffers = 0
  " let g:airline#extensions#tabline#show_splits = 0
  " let g:airline_theme='bubblegum'

" Color -------------------------------------------------------------------------------
  let g:colorizer_auto_filetype='css,html,scss'
  let g:colorizer_skip_comments = 1

  " if filereadable(expand("~/.vimrc_background"))
  "   let base16colorspace=256
  "   source ~/.vimrc_background
  " endif

" Javascript --------------------------------------------------------------------------
  let g:javascript_plugin_flow = 1
  let g:javascript_enable_domhtmlcss = 1
  let g:javascript_ignore_javaScriptdoc = 1
  let g:javascript_plugin_jsdoc = 1

" React JS-----------------------------------------------------------------------------
  let g:jsx_ext_required = 0

" Ruby, Ruby on Rails, Rspec ----------------------------------------------------------
  map <leader>a :call RunAllSpecs()<cr>
  map <leader>aa :call RunCurrentSpecFile()<cr>
  map <leader>t :call RunCurrentSpecFile()<cr>
  map <leader>s :call RunNearestSpec()<cr>
  map <leader>l :call RunLastSpec()<cr>

" Python ------------------------------------------------------------------------------
  set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/
  let python_highlight_all = 1

  " vim-test mappings
  " nnoremap <silent> <Leader>t :TestFile<CR>
  " nnoremap <silent> <Leader>s :TestNearest<CR>
  " nnoremap <silent> <Leader>l :TestLast<CR>
  " nnoremap <silent> <Leader>a :TestSuite<CR>
  " nnoremap <silent> <leader>gt :TestVisit<CR>

  " Run commands that require an interactive shell
  nnoremap <Leader>r :RunInInteractiveShell<space>

  " Run test faster using spring
  let g:rspec_command = '!spring rspec {spec}'


" Other-------------------------------------------------------------------------------

  let g:snipMate = {}
  let g:snipMate.scope_aliases = {}
  let g:snipMate.scope_aliases.javascript = 'html'
  let g:snipMate = { 'snippet_version' : 0 }
  " let g:multi_cursor_next_key='<C-n>'
  " let g:multi_cursor_prev_key='<C-p>'
  " let g:multi_cursor_skip_key='<C-x>'
  " let g:multi_cursor_quit_key='<Esc>'

" Use deoplete ------------------------------------------------------------------------
  " let g:deoplete#enable_at_startup = 1


" Prettier ----------------------------------------------------------------------------
let g:prettier#autoformat = 1
let g:prettier#autoformat_config_present = 1
let g:prettier#autoformat_require_pragma = 0

autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css

packloadall
